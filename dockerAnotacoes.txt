Curso Docker
--------------------------------------------------
1 - Imagens e Containeres

-> docker container ls || docker ps
     - Lista os containers ativos, com "ls -a" lista todos ja executados

-> docker run (nome)
     -  Roda um container, exemplo: docker run httpd
     - Para passar argumentos exemplo: 
	docker run -d -p 81:80 --name meu_apache httpd
     - Onde -d é detached, -p é porta, --name nomeia da sua forma, seguido da imagem, nesse caso, nomeei como meu_apache rodando na minha porta 81 local.
     - tem o -it que abre tela interativa tambem.

-> docker pull (imagem)
     - Baixa a imagem do hub do docker, exemplo git pull python

-> docker images
     - Lista imagens criadas ou baixadas no PC

-> docker build .
     - Builda a imagem criada com base no DockerFile

-> DockerFile exemplo:
	FROM node

	WORKDIR /src

	COPY package*.json .

	RUN npm install

	COPY . .

	EXPOSE 3000

	CMD ["node", "app.js"]

-> flag --help
    - exemplo: docker run --help, para auxiliar na procura dos comandos.

-> docker tag <id> <nome_novo>
    - exemplo: docker tag 5a9e26c30b4b meu_apache2

-> criando tag com docker tag <id> <nome_novo>: <nome_tag>
    - exemplo: docker tag 5a9e26c30b4b meu_apache2:versao1 
    - para usar a tag, docker pull meu_apache2:versao1, ou sem o :<tag> pega a ultima.

-> criando build Nomeado.
    - exemplo: docker build -t meuNodeNomeado .
    - onde -t da a brecha para por o nome e o ponto ( . ) para mostrar qu DockerFile esta na raiz -t <nome> .

-> Rodar container com iteratividade
    - docker start -i <container>

-> Remover imagem do nosso pc
    - docker rmi <imagem> / -f (força remoção)

-> Remover containers do nosso pc que nao estao sendo usados
   - docker system prune

-> Remover container apos utilização. Remove assim que stopa o mesmo
   - docker run --rm <container>

-> Copiando arquivos entre containers (entre um path e outro [container -> diretorio || diretorio -> container])
   - docker cp <caminho Fonte do Arquivo> <caminho Destino do Arquivo>
   - Exemplo: docker cp nodeMarcelo:/src/app.js ./copia/

-> Verificar processamento do container
   - Exemplo: docker top <container>

-> Verificar / Inspecionar dados de um container
   - Exemplo: docker inspect <container>

-> Verificar processamento do docker
   - Exemplo: docker stats <container>

-> Autenticação no terminal, enviar imagens via hub (docker.hub)
   - Exemplo: docker login
	    username e password

-> Logout no hub (docker,hub)
   - Exemplo: docker logout

-> Enviando imagens para o Docker Hub
    - Exemplo: docker push <imagem> (rodar build antes: docker build -t marcelo/nodeMarcelo).
	     docker push marcelo/nodeMarcelo (nome da imagem deve ser o mesmo do repositorio).

-> Baixando imagens pelo o Docker Hub
   - Exemplo: docker pull <imagem> || docker pull marcelo/nodeMarcelo

-> Atualizando imagens para o Docker Hub
   - Primeiro fazemos o build trocando a tag da imagem
   - Depois fazemos um push novamente para o repositorio, dessa forma nada sera sobreescrito.
   - Exemplo: docker build -t marcelo/nodeMarcelo:v001 .
	    docker push marcelo/nodeMarcelo:v001

-> Baixar e utilizar a imagem
    - Exemplo: docker pull <imagem>
	     docker run <imagem>
    - Exemplo Pratico: docker pull marcelo/nodeMarcelo:v001
		 docker run --name marceloNode -p 3000:3000 -d marcelo/nodeMarcelo:v001

--------------------------------------------------

2 - Volumes

-> Forma de persistir dados, vem para sanar problema de toda vez que remover um container com imagem, perder dados.

-> Tipos de volumes:
    - Anonimo (anonymous) : flag -v, pouco usado
    - Nomeado (named): Volumes com nomes, faceis de saber o que é e de usar
    - Bind Mount: forma de salvar dados na nossa maquina sem usar o gerenciamento do docker.

-> docker volume ls
    - Lista todos os volumes do nosso ambiente

-> Volume Anonimo
    - docker run -v /data (onde /data sera o diretorio que contem o volume anonimo).
        exemplo: docker run -d -p 81:80 --name phpmessages_container --rm -v /data phpmessages
    - docker inspect phpmessages_container
        Para verificar volume atrelado ao container

-> Volume Nomeado
    - docker run -v nomeDoVolume:/data
        exemplo:  docker run -d -p 81:80 --name phpmessages_container -v phpvolume:/var/www/html/messages --rm phpmessages (lembrando que o diretorio do volume deve ser o mesmo do WORKDIR [/var/www/html/])

-> Volume Bind Mount
    - Cria o volume na maquina host que esta executando o docker (nao criamos um volume em si, apontamos um diretorio).
    - docker run /dir/data:data
        Onde /dir/data é o diretorio do nosso pc, e o data caminho que estara os arquivos do container.
        exemplo: docker run -d -p 81:80 --name phpmessages_container -v D:\Temp\Marcelo\Tutoriais\CURSOS\dockerCurso\dockerCourse\2_volumes\messages:/var/www/html/messages --rm phpmessages

-> Bind Mount nao serve apenas para volumes
    - pode-se utilizar para atualização em tempo real do projeto
    - sem ter que refazer o build a cada atualização do memso
    - exemplo:
        docker run -d -p 81:80 --name phpmessages_container -v D:\Temp\Marcelo\Tutoriais\CURSOS\dockerCurso\dockerCourse\2_volumes\:/var/www/html/ --rm phpmessages
        * Ao inves de colocar o caminho de onde sera salvo os arquivos, coloca-se o path da raiz do projeto e o WORKDIR.
        * Dessa forma qualquer alteração em index.php ou outro arquivo é atualizado em tempo real sem necessidade de buildar

-> Criar volume manualmente
    - Utilizamos o comando: docker volume create <nome>
    - Desta maneira temos um named volume criado, podemos atrelar a algum container na execução do mesmo
    - docker volume ls
        lista todos os volumes
    - docker volume inspect nomeDoVolume
        Checa/ Inspeciona um volume (nome, escopo e muito mais)
    - docker volume rm nomeDoVolume
        Remove volume (todos os dados gravados no volume serao perdidos), CUIDADO.
    - docker volume prune
        Remove volume que nao estao sendo utilizados
    - docker run -v nomeDoVolume:/data:ro
        :ro (read only) Volume apenas leitura, pouco usado

--------------------------------------------------

3 - Conectando container com "Networks"

-> O que sao networks no docker
    - Uma forma de gerenciar a conexao do docker  com outras plataformas e ate mesmo containers
    - As redes sao criadas separadas dos containers, como os volumes
    - Ha drivers, simplifica a comunicação entre containers

-> Tipos de conexao
    - Externa: conexao com  uma API de um servidor remoto
    - Com o host: comunicação com a maquina que esta executando o docker
    - Entre containers: comunicação que utiliza o driver BRIDGE e permite a comunicação entre dois ou mais containers

-> Tipos de drivers (redes)
    - Bridge: o mais comum e default do docker, utilizado quando containers precisam se conectar (na maioria das vezes optamos por este driver)
    - host: permite a conexao entre um container a maquina que esta hosteando o docker;
    - macvlan: permite a conexao a um container por um MAC address
    - none: remove todas as conexoes de rede de um container
    - plugins: permite extensoes de terceiros para criar outras redes

-> Listando redes
    - docker network ls
    - Algumas redes ja vem listadas, fazem parte da conf inicial do docker

-> Criando redes
    - docker network create nomeDaRede (cria default como Bridge)
    - Criando especificando o driver
        * docker network create -d macvlan nomeDaRede onde:
        -d: delimita o driver
        macvlan: tipo do driver
        nomeDaRede: nome do seu gosto 

-> Removendo redes
    - docker network rm nomeDaRede (tomar cuidado com containers ja conectados)
    
-> Removendo redes nao utilizadas
    - docker network prune (todas as redes nao utilizadas no momento serao removidas)

-> Conexao Externa
    - Os containers podem se conectar livremente ao mundo externo
    - um caso seria: uma API de codigo aberto
    - podemos acessa-la livremente e utilizar seus dados
    - Vamos testar (3_networks\1_externa)

-> Conexao Com o host
    - Podemos conectar un container com o host do docker
    - HOST é a maquina que esta executando docker
    - Como IP de host utilizamos: host.docker.internal
    - No caso pode ser a nossa mesmo (3_networks\2_host)

-> Conexao entre Containers
    - Duas imagens distintas rodando em containers separados que precisam ser se conectar para inserir um dado no banco, por exemplo
    - Vamos precisar de uma rede bridge para fazer esta conexao
    - Agora nosso container de flask vai inserir dados em um MySQL que roda pelo Docker tambem
    Exemplo:
    * Criando rede
    docker network create flasknetwork

    * Buildando o mysql
    docker build -t mysqlnetworkapi .
    * Rodando container mysql
    docker run -d -p 3307:3307 --name mysql_api_container --rm --network flasknetwork mysqlnetworkapi

    * Buildando o flask
    docker build -t flasknetwork .
    * Rodando container flask
    docker run -d -p 5000:5000 --name flask_api_container --rm --network flasknetwork flaskapinetwork

    * OBSERVE QUE O "--network flasknetwork" que junta a rede com os containers mysql e flask

-> Conexao de container a rede
    - Podemos conectar um container a uma rede
    - Vamos utilizar o comando  docker network connect nomeDaRede nomeDoContainer
    - Apos o comando o container estara dentro da rede
    exemplo:
     docker network connect flask network 947dad15er45
     docker inspect 947dad15er45 (ve a rede inserida)

-> Desconectar container da rede
    - docker network disconnect nomeDaRede nomeDoContainer

-> Inspecionando redes
    - Pode-se analisar dados de uma rede com: docker network inspect nomeDaRede (traz datacriacao, driver, nome e muito mais)

--------------------------------------------------

4 - YAML

-> O que é YAML?
    - Uma linguagem de serialização , seu nome YAML ain't Markup Language (YAML não é uma linguagem de Marcação)
    - Usada geralmente para arquivos de configuracao, inclusive do Docker para configurar o Docker Compose
    - De facil leitura para humanos
    - Extensao é yml ou yaml

-> Espacamento e identacao
    - o fim da linha indica fim da instrução (sem ponto e virgula)
    - A identacao deve conter um ou mais espaços e nao conter TAB
    - E cada linha define um novo bloco
    - O espaco é obrigatorio apos a declaracao da chave

--------------------------------------------------

5 - Gerenciando multiplos containers com DOCKER Compose

-> O que é o Docker Compose
    - O docker compose é uma ferramenta para rodar multiplos containers
    - teremos um unico arquivo de configuracao, que orquestra totalmente esta situacao
    - é uma forma de rodar multiplos BUILDS e RUNS com um comando
    - Em projetos maiores é essencial o uso do compose 

-> Criando nosso primeiro arquivo compose
    - Criamos um arquivo chamado docker-compose.yml
    - Este arquivo vai coordenar os containers e imagens e possui algumas chaves muito utilizadas:
    - version: versao do compose
    - services: Containers/serviços que vao rodar nessa aplicacao
    - volumes: possivel adicao de volumes

-> Rodando o compose
    - Para rodar o compose utiliza o comnando: docker-compose up
    - Isso fara com que as instruções nos arquivos sejam executadas
    - Da mesma forma que realizamos os builds e tambem os runs
    - Podemos parar o compose com ctrl+c no terminal

-> Rodando o compose em background
    - Pode ser rodado em modo detached
    - Para isso vamos usar a flag -d no comando
        docker-compose up -d
    - E entao os containers estarao rodando em background
    - Podemos ver sua execução com: docker ps

-> Parando o compose
    - docker-compose down
    - Desta maneira o serviço para e temos os containers adicionados no docker ps -a

-> Variaveis de ambiente no compose
    - Pode-se definir variavel de ambiente para o compose
    - Para isso vamos definir um arquivo base em env_file (db.env [exemplo])
    - As variaveis podem ser chamadas pela sintaxe: ${VARIAVEL}
    - Tecnica util para dado sensivel que nao pode ser compatilhado como senha por exemplo.
    Exemplo:
        env_file:
        - ./config/db.env

-> Redes no Compose
    - O compose cria uma rede basica BRIDGE entre os containers da aplicacao
    - Porem podemos isolar as redes com a chave network
    - Desta forma podemos conectar apenas os containers que optamos
    - E podemos definir driver diferentes tambem

-> Incluindo projeto no compose
    - Vamos inserir o projeto da ultima seção no compose
    - Ver na pratica como fazer uma transferencia de DockerFiles para Docker-compose (5_compose\4_projeto)
    lembar de buildar as imagens:
        docker build -t flaskcompose .
        docker build -t mysqlcompose .
        docker-compose up -d

-> Build no compose
    - Podemos gerar o build durante o compose tambem
    - Isso vai eliminar o processo  de gerar o build da imagem a cada atualização

-> Bind Mount no compose
    - o volume de Bind Mount garante a atualização em tempo real dos arquivos do container
    - Podemos configurar nosso projeto de Compose para utilizar esta funcionalidade tambem

-> Verficando o que tem no compose 
    - Podemos fazer a verificacao do compose com: docker-compose ps
    - Receberemos um resumo dos serviços que sobem ao rodar o compose
    - Desta maneira podemos avaliar rapidamente o projeto


